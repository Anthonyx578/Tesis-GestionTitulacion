import { obtenerDatosToken } from "@/services/service-extracionDatosToken";
import { cookies } from "next/headers";

export const metadata = {
    title: "Formulario de Tesis - Administración de Sustentación de Tesis",
    robots: "noindex, follow",
    alternates: { canonical: "" }
};

export default function FormularioTesis_Page() {
    const cookieStore = cookies();
    const token = cookieStore.get("authuleamtk")?.value;

    const [usuario, rol] = token ? obtenerDatosToken(token) : ["", "estudiantes"];

    const data = {
        title: "Análisis de Sistemas",
        descripcion: "El análisis de sistemas es el proceso de estudiar y descomponer sistemas complejos...",
        periodo: "2024-1",
        requerimientos: {
            requerimiento1: { title: "Documentacion", aprobacion: true },
            requerimiento2: { title: "Asignaturas", aprobacion: false },
            requerimiento3: { title: "TESIS 1 Y 2", aprobacion: true },
            requerimiento4: { title: "TESIS 1 Y 2", aprobacion: true }
        },
        jurados: [
            { nombre: "Dr. Juan Pérez", calificacion: 8.5, comentario: "Buen trabajo, mejorar en documentación." },
            { nombre: "Ing. Carlos Rodríguez", calificacion: 7.0, comentario: "Presentación clara, pero faltó profundidad en el análisis." }
        ]
    };

    const requisitosCumplidos = Object.values(data.requerimientos).filter(r => r.aprobacion).length;
    const totalRequisitos = Object.values(data.requerimientos).length;

    return (
        <div className="flex flex-col sm:p-6 dark:text-gray-200">
            {/* Título y descripción */}
            <div className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-lg mb-6">
                <h1 className="text-3xl font-bold">{data.title} / {data.periodo}</h1>
                <p className="text-gray-600 dark:text-gray-300">{data.descripcion}</p>
            </div>

            {/* Resumen visual de requisitos */}
            <div className="flex items-center justify-center mb-6">
                <div className="text-center">
                    <svg width="100" height="100" viewBox="0 0 36 36" className="circular-chart">
                        <path
                            className="circle-bg"
                            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                            fill="none"
                            stroke="#ddd"
                            strokeWidth="3.8"
                        />
                        <path
                            className="circle"
                            strokeDasharray={`${(requisitosCumplidos / totalRequisitos) * 100}, 100`}
                            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                            fill="none"
                            stroke="#4caf50"
                            strokeWidth="3.8"
                        />
                    </svg>
                    <p className="font-semibold mt-2">{`${requisitosCumplidos} / ${totalRequisitos} Requerimientos Completados`}</p>
                </div>
            </div>

            {/* Tabla de jurados y calificaciones */}
            <div className="overflow-x-auto mb-6">
                <h1 className="text-xl font-semibold pb-2">Jurado / Calificación</h1>
                <table className="table-auto border-collapse border border-gray-300 dark:border-gray-700 w-full text-center shadow-lg">
                    <thead>
                        <tr className="bg-gray-200 dark:bg-slate-700">
                            <th className="border border-gray-300 dark:border-gray-700 px-4 py-2">Jurados</th>
                            <th className="border border-gray-300 dark:border-gray-700 px-4 py-2">Calificación</th>
                            <th className="border border-gray-300 dark:border-gray-700 px-4 py-2">Comentario</th>
                        </tr>
                    </thead>
                    <tbody>
                        {data.jurados.map((jurado, index) => (
                            <tr key={index} className="odd:bg-white even:bg-gray-100 dark:odd:bg-slate-800 dark:even:bg-slate-700">
                                <td className="border border-gray-300 dark:border-gray-700 px-4 py-2">{jurado.nombre}</td>
                                <td className="border border-gray-300 dark:border-gray-700 px-4 py-2">
                                    <div className="flex justify-center items-center">
                                        <div className="w-full bg-gray-200 rounded h-4 dark:bg-gray-700">
                                            <div
                                                className={`h-4 rounded ${
                                                    jurado.calificacion >= 7 ? "bg-green-500" : "bg-red-500"
                                                }`}
                                                style={{ width: `${jurado.calificacion * 10}%` }}
                                            ></div>
                                        </div>
                                    </div>
                                </td>
                                <td className="border border-gray-300 dark:border-gray-700 px-4 py-2">{jurado.comentario}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Tabla de Requerimientos */}
            <div className="overflow-x-auto">
                <h1 className="text-xl font-semibold pb-2">Requerimientos Cumplidos</h1>
                <table className="table-auto border-collapse border border-gray-300 dark:border-gray-700 w-full text-center shadow-lg">
                    <thead>
                        <tr className="bg-gray-200 dark:bg-slate-700">
                            {Object.entries(data.requerimientos).map(([key, requerimiento]) => (
                                <th key={key} className="border border-gray-300 dark:border-gray-700 px-4 py-2">
                                    {requerimiento.title}
                                </th>
                            ))}
                        </tr>
                    </thead>
                    <tbody>
                        <tr className="odd:bg-white even:bg-gray-100 dark:odd:bg-slate-800 dark:even:bg-slate-700">
                            {Object.entries(data.requerimientos).map(([key, requerimiento]) => (
                                <td key={key} className="border border-gray-300 dark:border-gray-700 px-4 py-2">
                                    <div className="flex justify-center items-center">
                                        {requerimiento.aprobacion ? (
                                            <svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px" fill="#75FB4C">
                                                <path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z" />
                                            </svg>
                                        ) : (
                                            <svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px" fill="#EA3323">
                                                <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" />
                                            </svg>
                                        )}
                                    </div>
                                </td>
                            ))}
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    );
}
